# AMCL（Adaptive Monte Carlo Localization，自适应蒙特卡洛定位）参数配置
amcl:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    alpha1: 0.2  # 旋转运动的噪声参数
    alpha2: 0.2  # 直线运动的噪声参数
    alpha3: 0.2  # 直线运动中旋转的噪声参数
    alpha4: 0.2  # 旋转运动中直线的噪声参数
    alpha5: 0.2  # 角速度的噪声参数
    base_frame_id: "base_footprint"  # 机器人的基础坐标框架ID
    beam_skip_distance: 0.5  # 激光束跳过的最小距离
    beam_skip_error_threshold: 0.9  # 激光束跳过的错误阈值
    beam_skip_threshold: 0.3  # 激光束跳过的阈值
    do_beamskip: false  # 是否启用激光束跳过
    global_frame_id: "map"  # 全局坐标框架ID
    lambda_short: 0.1  # 短距离测量的指数衰减参数
    laser_likelihood_max_dist: 2.0  # 激光测量的最大似然距离
    laser_max_range: 100.0  # 激光的最大测量范围
    laser_min_range: -1.0  # 激光的最小测量范围
    laser_model_type: "likelihood_field"  # 激光模型类型
    max_beams: 60  # 使用的最大激光束数
    max_particles: 2000  # 最大粒子数
    min_particles: 500  # 最小粒子数
    odom_frame_id: "odom"  # 里程计坐标框架ID
    pf_err: 0.05  # 粒子滤波器的误差阈值
    pf_z: 0.99  # 粒子滤波器的置信度阈值
    recovery_alpha_fast: 0.0  # 快速衰减因子
    recovery_alpha_slow: 0.0  # 慢速衰减因子
    resample_interval: 1  # 重采样的间隔
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # 机器人运动模型类型
    save_pose_rate: 0.5  # 保存机器人数姿的频率（秒）
    sigma_hit: 0.2  # 测量模型中的标准差
    tf_broadcast: true  # 是否广播TF变换
    transform_tolerance: 1.0  # TF变换的容忍度（秒）
    update_min_a: 0.2  # 最小角度更新（弧度）
    update_min_d: 0.25  # 最小距离更新（米）
    z_hit: 0.5  # 测量模型中命中项的权重
    z_max: 0.05  # 测量模型中最大范围项的权重
    z_rand: 0.5  # 测量模型中随机项的权重
    z_short: 0.05  # 测量模型中短距离项的权重
    scan_topic: scan  # 激光扫描的主题名称

# 行为树导航器（BT Navigator）的参数配置
bt_navigator:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    global_frame: map  # 全局坐标框架ID
    robot_base_frame: base_link  # 机器人基础坐标框架ID
    odom_topic: /odom  # 里程计主题
    bt_loop_duration: 10  # 行为树循环持续时间（毫秒）
    default_server_timeout: 20  # 默认服务器超时时间（秒）
    # 'default_nav_through_poses_bt_xml' 和 'default_nav_to_pose_bt_xml' 使用默认值：
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # 可以在此处设置或通过父启动文件的 RewrittenYaml 重映射到 Nav2。
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node  # 计算路径到姿态的行为树节点
      - nav2_compute_path_through_poses_action_bt_node  # 计算穿过多个姿态的路径节点
      - nav2_smooth_path_action_bt_node  # 平滑路径节点
      - nav2_follow_path_action_bt_node  # 跟随路径节点
      - nav2_spin_action_bt_node  # 原地旋转节点
      - nav2_wait_action_bt_node  # 等待节点
      - nav2_assisted_teleop_action_bt_node  # 辅助遥控节点
      - nav2_back_up_action_bt_node  # 后退节点
      - nav2_drive_on_heading_bt_node  # 朝向指定方向行驶节点
      - nav2_clear_costmap_service_bt_node  # 清除代价地图服务节点
      - nav2_is_stuck_condition_bt_node  # 判断是否卡住的条件节点
      - nav2_goal_reached_condition_bt_node  # 判断是否到达目标的条件节点
      - nav2_goal_updated_condition_bt_node  # 判断目标是否更新的条件节点
      - nav2_globally_updated_goal_condition_bt_node  # 判断全局目标是否更新的条件节点
      - nav2_is_path_valid_condition_bt_node  # 判断路径是否有效的条件节点
      - nav2_initial_pose_received_condition_bt_node  # 判断是否收到初始位姿的条件节点
      - nav2_reinitialize_global_localization_service_bt_node  # 重新初始化全局定位服务节点
      - nav2_rate_controller_bt_node  # 速率控制器节点
      - nav2_distance_controller_bt_node  # 距离控制器节点
      - nav2_speed_controller_bt_node  # 速度控制器节点
      - nav2_truncate_path_action_bt_node  # 截断路径节点
      - nav2_truncate_path_local_action_bt_node  # 本地截断路径节点
      - nav2_goal_updater_node_bt_node  # 目标更新节点
      - nav2_recovery_node_bt_node  # 恢复节点
      - nav2_pipeline_sequence_bt_node  # 管道序列节点
      - nav2_round_robin_node_bt_node  # 轮询节点
      - nav2_transform_available_condition_bt_node  # 判断变换是否可用的条件节点
      - nav2_time_expired_condition_bt_node  # 判断时间是否过期的条件节点
      - nav2_path_expiring_timer_condition  # 判断路径是否即将过期的条件节点
      - nav2_distance_traveled_condition_bt_node  # 判断是否已行驶指定距离的条件节点
      - nav2_single_trigger_bt_node  # 单次触发节点
      - nav2_goal_updated_controller_bt_node  # 目标更新控制器节点
      - nav2_is_battery_low_condition_bt_node  # 判断电池电量是否低的条件节点
      - nav2_navigate_through_poses_action_bt_node  # 导航穿过多个姿态的行为树节点
      - nav2_navigate_to_pose_action_bt_node  # 导航到指定姿态的行为树节点
      - nav2_remove_passed_goals_action_bt_node  # 移除已通过的目标节点
      - nav2_planner_selector_bt_node  # 规划器选择器节点
      - nav2_controller_selector_bt_node  # 控制器选择器节点
      - nav2_goal_checker_selector_bt_node  # 目标检查器选择器节点
      - nav2_controller_cancel_bt_node  # 控制器取消节点
      - nav2_path_longer_on_approach_bt_node  # 路径接近时变长的节点
      - nav2_wait_cancel_bt_node  # 等待取消节点
      - nav2_spin_cancel_bt_node  # 旋转取消节点
      - nav2_back_up_cancel_bt_node  # 后退取消节点
      - nav2_assisted_teleop_cancel_bt_node  # 辅助遥控取消节点
      - nav2_drive_on_heading_cancel_bt_node  # 朝向指定方向行驶取消节点
      - nav2_is_battery_charging_condition_bt_node  # 判断电池是否正在充电的条件节点

# 导航通过多个姿态的行为树节点参数
bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间

# 导航到指定姿态的行为树节点参数
bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间

# 控制器服务器的参数配置
controller_server:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    controller_frequency: 20.0  # 控制器频率（Hz）
    min_x_velocity_threshold: 0.001  # 最小X方向速度阈值
    min_y_velocity_threshold: 0.5  # 最小Y方向速度阈值
    min_theta_velocity_threshold: 0.001  # 最小角速度阈值
    failure_tolerance: 0.3  # 容忍的失败阈值（秒）
    progress_checker_plugin: "progress_checker"  # 进度检查器插件
    goal_checker_plugins: ["general_goal_checker"]  # 目标检查器插件列表
    controller_plugins: ["FollowPath"]  # 控制器插件列表

    # 进度检查器参数
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # 使用简单进度检查器
      required_movement_radius: 0.5  # 要求的移动半径（米）
      movement_time_allowance: 10.0  # 允许的移动时间（秒）
    # 目标检查器参数
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker:
      stateful: True  # 是否有状态
      plugin: "nav2_controller::SimpleGoalChecker"  # 使用简单目标检查器
      xy_goal_tolerance: 0.1  # XY方向的目标容忍度（米）
      yaw_goal_tolerance: 0.1  # 偏航角的目标容忍度（弧度）
    # DWB（动态窗口法）参数
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"  # 使用DWB本地规划器
      debug_trajectory_details: True  # 调试轨迹细节
      min_vel_x: 0.0  # 最小X方向速度（米/秒）
      min_vel_y: 0.0  # 最小Y方向速度（米/秒）
      max_vel_x: 0.26  # 最大X方向速度（米/秒）
      max_vel_y: 0.0  # 最大Y方向速度（米/秒）
      max_vel_theta: 1.0  # 最大角速度（弧度/秒）
      min_speed_xy: 0.0  # 最小XY平面速度（米/秒）
      max_speed_xy: 0.26  # 最大XY平面速度（米/秒）
      min_speed_theta: 0.0  # 最小角速度（弧度/秒）
      # 为了解决TurtleBot3的问题，增加了高阈值速度
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5  # X方向加速度限制（米/秒²）
      acc_lim_y: 0.0  # Y方向加速度限制（米/秒²）
      acc_lim_theta: 3.2  # 角加速度限制（弧度/秒²）
      decel_lim_x: -2.5  # X方向减速度限制（米/秒²）
      decel_lim_y: 0.0  # Y方向减速度限制（米/秒²）
      decel_lim_theta: -3.2  # 角减速度限制（弧度/秒²）
      vx_samples: 20  # X方向速度采样数
      vy_samples: 5  # Y方向速度采样数
      vtheta_samples: 20  # 角速度采样数
      sim_time: 1.7  # 仿真时间（秒）
      linear_granularity: 0.05  # 线性粒度（米）
      angular_granularity: 0.025  # 角度粒度（弧度）
      transform_tolerance: 0.2  # 变换容忍度（秒）
      xy_goal_tolerance: 0.1  # XY方向的目标容忍度（米）
      trans_stopped_velocity: 0.25  # 认为机器人停止的线速度阈值（米/秒）
      short_circuit_trajectory_evaluation: True  # 是否短路轨迹评估
      stateful: True  # 是否有状态
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  # 评价函数列表
      BaseObstacle.scale: 0.02  # 基础障碍物评价的缩放因子
      PathAlign.scale: 32.0  # 路径对齐评价的缩放因子
      PathAlign.forward_point_distance: 0.1  # 前向点距离（米）
      GoalAlign.scale: 24.0  # 目标对齐评价的缩放因子
      GoalAlign.forward_point_distance: 0.1  # 前向点距离（米）
      PathDist.scale: 32.0  # 路径距离评价的缩放因子
      GoalDist.scale: 24.0  # 目标距离评价的缩放因子
      RotateToGoal.scale: 32.0  # 旋转到目标评价的缩放因子
      RotateToGoal.slowing_factor: 5.0  # 减速因子
      RotateToGoal.lookahead_time: -1.0  # 前瞻时间（秒）

# 本地代价地图的参数配置
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  # 更新频率（Hz）
      publish_frequency: 2.0  # 发布频率（Hz）
      global_frame: odom  # 全局坐标框架ID
      robot_base_frame: base_link  # 机器人基础坐标框架ID
      use_sim_time: True  # 使用仿真时间
      rolling_window: true  # 是否使用滚动窗口
      width: 3  # 地图宽度（米）
      height: 3  # 地图高度（米）
      resolution: 0.05  # 地图分辨率（米/像素）
      robot_radius: 0.12  # 机器人半径（米）
      plugins: ["voxel_layer", "inflation_layer"]  # 使用的层插件列表
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 3.0  # 成本缩放因子
        inflation_radius: 0.55  # 膨胀半径（米）
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 体素层插件
        enabled: True  # 是否启用
        publish_voxel_map: True  # 是否发布体素地图
        origin_z: 0.0  # Z轴起点（米）
        z_resolution: 0.05  # Z轴分辨率（米）
        z_voxels: 16  # Z轴体素数
        max_obstacle_height: 2.0  # 最大障碍物高度（米）
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源列表
        scan:
          topic: /scan  # 激光扫描主题
          max_obstacle_height: 2.0  # 最大障碍物高度（米）
          clearing: True  # 是否清除
          marking: True  # 是否标记
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 射线追踪最大范围（米）
          raytrace_min_range: 0.0  # 射线追踪最小范围（米）
          obstacle_max_range: 2.5  # 障碍物最大范围（米）
          obstacle_min_range: 0.0  # 障碍物最小范围（米）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 是否使用瞬态本地订阅
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

# 全局代价地图的参数配置
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0  # 更新频率（Hz）
      publish_frequency: 1.0  # 发布频率（Hz）
      global_frame: map  # 全局坐标框架ID
      robot_base_frame: base_link  # 机器人基础坐标框架ID
      use_sim_time: True  # 使用仿真时间
      robot_radius: 0.12  # 机器人半径（米）
      resolution: 0.05  # 地图分辨率（米/像素）
      track_unknown_space: true  # 是否跟踪未知空间
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 使用的层插件列表
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 障碍物层插件
        enabled: True  # 是否启用
        observation_sources: scan  # 观测源列表
        scan:
          topic: /scan  # 激光扫描主题
          max_obstacle_height: 2.0  # 最大障碍物高度（米）
          clearing: True  # 是否清除
          marking: True  # 是否标记
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 3.0  # 射线追踪最大范围（米）
          raytrace_min_range: 0.0  # 射线追踪最小范围（米）
          obstacle_max_range: 2.5  # 障碍物最大范围（米）
          obstacle_min_range: 0.0  # 障碍物最小范围（米）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件
        map_subscribe_transient_local: True  # 是否使用瞬态本地订阅
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件
        cost_scaling_factor: 3.0  # 成本缩放因子
        inflation_radius: 0.55  # 膨胀半径（米）
      always_send_full_costmap: True  # 是否总是发送完整的代价地图

# 地图服务器的参数配置
map_server:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    # 在启动时由 "map" 启动配置或提供的默认值覆盖。
    # 要在 yaml 中使用，请删除 tb3_simulation_launch.py 文件中的默认 "map" 值，并在下面提供完整的地图路径。
    yaml_filename: ""  # 地图文件的路径

# 地图保存器的参数配置
map_saver:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    save_map_timeout: 5.0  # 保存地图的超时时间（秒）
    free_thresh_default: 0.25  # 空闲阈值默认值
    occupied_thresh_default: 0.65  # 占用阈值默认值
    map_subscribe_transient_local: True  # 是否使用瞬态本地订阅

# 规划器服务器的参数配置
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0  # 预期的规划器频率（Hz）
    use_sim_time: True  # 使用仿真时间
    planner_plugins: ["GridBased"]  # 规划器插件列表
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"  # 使用Navfn规划器
      tolerance: 0.5  # 目标容忍度（米）
      use_astar: false  # 是否使用A*算法
      allow_unknown: true  # 是否允许未知区域

# 路径平滑器服务器的参数配置
smoother_server:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    smoother_plugins: ["simple_smoother"]  # 平滑器插件列表
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"  # 使用简单平滑器
      tolerance: 1.0e-10  # 容忍度
      max_its: 1000  # 最大迭代次数
      do_refinement: True  # 是否进行细化

# 行为服务器的参数配置
behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw  # 代价地图主题
    footprint_topic: local_costmap/published_footprint  # 机器人足迹主题
    cycle_frequency: 10.0  # 循环频率（Hz）
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]  # 行为插件列表
    spin:
      plugin: "nav2_behaviors/Spin"  # 旋转行为插件
    backup:
      plugin: "nav2_behaviors/BackUp"  # 后退行为插件
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"  # 朝向指定方向行驶行为插件
    wait:
      plugin: "nav2_behaviors/Wait"  # 等待行为插件
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"  # 辅助遥控行为插件
    global_frame: odom  # 全局坐标框架ID
    robot_base_frame: base_link  # 机器人基础坐标框架ID
    transform_tolerance: 0.1  # 变换容忍度（秒）
    use_sim_time: true  # 使用仿真时间
    simulate_ahead_time: 2.0  # 向前模拟时间（秒）
    max_rotational_vel: 1.0  # 最大旋转速度（弧度/秒）
    min_rotational_vel: 0.4  # 最小旋转速度（弧度/秒）
    rotational_acc_lim: 3.2  # 旋转加速度限制（弧度/秒²）

# 机器人状态发布器的参数配置
robot_state_publisher:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间

# 路点跟随器的参数配置
waypoint_follower:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    loop_rate: 20  # 循环频率（Hz）
    stop_on_failure: false  # 是否在失败时停止
    waypoint_task_executor_plugin: "wait_at_waypoint"  # 路点任务执行器插件
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"  # 在路点等待的插件
      enabled: True  # 是否启用
      waypoint_pause_duration: 200  # 在路点暂停的持续时间（毫秒）

# 速度平滑器的参数配置
velocity_smoother:
  ros__parameters:
    use_sim_time: True  # 使用仿真时间
    smoothing_frequency: 20.0  # 平滑频率（Hz）
    scale_velocities: False  # 是否缩放速度
    feedback: "OPEN_LOOP"  # 反馈类型
    max_velocity: [0.26, 0.0, 1.0]  # 最大速度（X, Y, Theta）
    min_velocity: [-0.26, 0.0, -1.0]  # 最小速度（X, Y, Theta）
    max_accel: [2.5, 0.0, 3.2]  # 最大加速度（X, Y, Theta）
    max_decel: [-2.5, 0.0, -3.2]  # 最大减速度（X, Y, Theta）
    odom_topic: "odom"  # 里程计主题
    odom_duration: 0.1  # 里程计持续时间（秒）
    deadband_velocity: [0.0, 0.0, 0.0]  # 零速死区（X, Y, Theta）
    velocity_timeout: 1.0  # 速度超时时间（秒）
