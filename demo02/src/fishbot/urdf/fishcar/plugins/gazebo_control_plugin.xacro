<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- 定义了一个xacro宏，用于生成控制插件 -->
    <xacro:macro name="gazebo_control_plugin">
        <gazebo>
            <!-- 定义一个插件，用于ROS与Gazebo的交互 -->
            <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>

                <!-- ros 标签下的配置参数，用于设置ROS的命名空间和话题映射 -->
                <!--
                    <namespace> 标签定义了 ROS 的命名空间。
                    如果设置为 <namespace>/n1</namespace>，生成的所有话题和节点名称会带上 "/n1" 前缀，
                    这样可以用于区分不同机器人或系统，避免话题冲突。

                    <remapping> 用于重映射话题名称。重映射将 Gazebo 内部话题名称与 ROS 话题名称对应。
                    例如， <remapping>cmd_vel:=cmd_vel</remapping> 表示将 Gazebo 中的 "cmd_vel" 话题映射到 ROS 中的 "cmd_vel" 话题。
                -->
                <ros>
                    <namespace>/</namespace>                  <!-- 默认命名空间，设置为根命名空间"/" -->
                    <remapping>cmd_vel:=cmd_vel</remapping>   <!-- 将 Gazebo 的 cmd_vel 话题映射到 ROS 的 cmd_vel 话题 -->
                    <remapping>odom:=odom</remapping>         <!-- 将 Gazebo 的 odom 话题映射到 ROS 的 odom 话题 -->
                </ros>

                <!-- update_rate: 定义插件的更新频率（Hz），即每秒发布多少次信息。这里设置为 30 Hz，表示每秒更新 30 次。 -->
                <update_rate>30</update_rate>

                <!-- wheels: 定义控制轮子的相关参数 -->
                <!--
                    <left_joint> 和 <right_joint> 指定左右轮子的关节名称，
                    这些名称应与机器人URDF中的关节名称一致。
                -->
                <left_joint>left_wheel_joint</left_joint>    <!-- 左轮的关节名称 -->
                <right_joint>right_wheel_joint</right_joint>  <!-- 右轮的关节名称 -->

                <wheel_separation>0.2</wheel_separation>      <!-- 两轮之间的距离，单位为米 -->
                <wheel_diameter>0.064</wheel_diameter>        <!-- 轮子的直径，单位为米 -->
                <max_wheel_torque>20</max_wheel_torque>                       <!-- 最大轮扭矩，单位为 Nm -->
                <max_wheel_acceleration>1.0</max_wheel_acceleration>          <!-- 最大轮加速度，单位为 m/s² -->

                <!-- output: 设置是否发布里程数据和轮子、底盘位置的 TF 坐标 -->
                <publish_odom>true</publish_odom>                <!-- 是否发布里程数据（位置与速度） -->
                <publish_odom_tf>true</publish_odom_tf>          <!-- 是否发布 odom 坐标到机器人底座坐标的动态变换 -->
                <publish_wheel_tf>true</publish_wheel_tf>        <!-- 是否发布轮子的旋转数据作为 TF 变换 -->

                <!-- frames: 定义里程计的坐标系名称和机器人底盘的坐标系名称 -->
                <!--
                    <odometry_frame> 定义里程计数据的坐标系名称，通常设置为 "odom"。
                    <robot_base_frame> 定义机器人底盘的坐标系名称，通常与 URDF 文件中的底盘帧一致。
                -->
                <odometry_frame>odom</odometry_frame>                  <!-- 里程计的参考坐标系 -->
                <robot_base_frame>base_footprint</robot_base_frame>    <!-- 机器人底盘的坐标系名称 -->
            </plugin>
        </gazebo>
   </xacro:macro>
</robot>
